{"meta":{"title":"Kang's Blog","subtitle":"爱分享，乐学习","description":"","author":"Kang","url":"https://flipped-1121.github.io","root":"/"},"pages":[{"title":"","date":"2020-06-17T09:54:16.098Z","updated":"2020-06-17T09:38:00.840Z","comments":true,"path":"baidu_verify_QFH1ukdGTO.html","permalink":"https://flipped-1121.github.io/baidu_verify_QFH1ukdGTO.html","excerpt":"","text":"QFH1ukdGTO"},{"title":"友情链接","date":"2020-06-23T10:49:52.000Z","updated":"2020-06-24T07:19:53.905Z","comments":true,"path":"link/index.html","permalink":"https://flipped-1121.github.io/link/index.html","excerpt":"","text":""},{"title":"categories","date":"2020-06-14T08:47:06.000Z","updated":"2020-06-14T08:47:29.504Z","comments":true,"path":"categories/index.html","permalink":"https://flipped-1121.github.io/categories/index.html","excerpt":"","text":""},{"title":"About","date":"2020-06-16T15:47:54.000Z","updated":"2020-06-24T07:06:52.916Z","comments":false,"path":"about/index.html","permalink":"https://flipped-1121.github.io/about/index.html","excerpt":"","text":"当杨花落尽 马失前蹄 与其感叹世事无常 时节交替 不如忘却身后的影子 面对那属于你的太阳 当你面朝大海 心向暖阳 春已到 花即开 &nbsp; 当星河璀璨 万籁俱寂 与其无奈闲人几何 美景无人赏 不如拭去眼角的秋霜 微笑于那醉人的月光 当你身临空域 胸中涌浪 星已亮 光即照 &nbsp; 当花草皆烬 雁过雪飘 与其感伤情错于人 世故弄今糟 不如拈灰造墨 潇洒看今朝 当你手握枯笔 思绪横跳 文已成 情即烧"},{"title":"友情链接","date":"2020-06-16T07:35:25.000Z","updated":"2020-06-16T08:07:27.057Z","comments":false,"path":"links/index.html","permalink":"https://flipped-1121.github.io/links/index.html","excerpt":"","text":""},{"title":"那些年，我们看过的电影","date":"2020-06-23T10:48:54.000Z","updated":"2020-06-23T10:49:17.899Z","comments":true,"path":"movies/index.html","permalink":"https://flipped-1121.github.io/movies/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-06-14T08:47:17.000Z","updated":"2020-06-24T07:01:35.008Z","comments":false,"path":"tags/index.html","permalink":"https://flipped-1121.github.io/tags/index.html","excerpt":"","text":""},{"title":"那些年，我们听过的音乐","date":"2020-06-23T10:47:47.000Z","updated":"2020-06-24T07:05:42.392Z","comments":false,"path":"music/index.html","permalink":"https://flipped-1121.github.io/music/index.html","excerpt":"","text":"静静地聆听这个世界 &nbsp; &nbsp; 释放内心的悸动 &nbsp;"}],"posts":[{"title":"心想随记 (二)","slug":"Blog-06","date":"2020-06-20T12:44:32.468Z","updated":"2020-06-24T07:17:37.162Z","comments":true,"path":"2020/06/20/Blog-06/","link":"","permalink":"https://flipped-1121.github.io/2020/06/20/Blog-06/","excerpt":"二十岁，一个尴尬的年龄","text":"二十岁，一个尴尬的年龄 &nbsp; &nbsp; 又到了做什么都是一个人的年龄 在错误的时间遇到自以为对的人 不要太认真，会输得很惨 永远不要以为自己有多了解一个人 学会微笑","categories":[],"tags":[{"name":"感悟","slug":"感悟","permalink":"https://flipped-1121.github.io/tags/%E6%84%9F%E6%82%9F/"},{"name":"壁纸","slug":"壁纸","permalink":"https://flipped-1121.github.io/tags/%E5%A3%81%E7%BA%B8/"}]},{"title":"800 字？手写？不可能！！！","slug":"Blog-05","date":"2020-06-15T12:27:58.670Z","updated":"2020-06-24T07:17:13.198Z","comments":true,"path":"2020/06/15/Blog-05/","link":"","permalink":"https://flipped-1121.github.io/2020/06/15/Blog-05/","excerpt":"小伙儿参加了学校的一个学时活动，原以为水水就过去了，报名后发现事实并没那么简单","text":"小伙儿参加了学校的一个学时活动，原以为水水就过去了，报名后发现事实并没那么简单 &nbsp; &nbsp; 利用 Word 宏 实现手写效果 背景2019 年 9 月，我第一次背上行囊离开生我养我的家乡，开启美好的大学生活，原以为高中老师嘴中那自由的新天地在向我疯狂招手，在得知【学时】制度 (大学四年一共要修满 240 个学时 ——&gt; 及格；400——&gt; 满分) 后，我宛如再次被 “囚禁” 的鸟儿，“什么，参加活动才有学时？！还计分？？🤬🤬🤬”，自此以后 六月是我国的安全生产月，但由于疫情的影响，学时活动都只能在网上进行，原以为可以水水学时，但是但是但是 &nbsp; 开始操作【不少于 800 字】、【纸质扫描版】…… 让原本不富裕的家庭雪上加霜。要说科技改变生活，不无道理。 懒人改变生活 快速地打开百毒，优雅地输入 “手写体”，下载 ——&gt; 解压 ——&gt; 安装字体，兴致冲冲地打开 Word，嘴角疯狂上扬，就这？一番捣鼓后，800 多字的读后感完成了，但是又出现了问题 再次操作写得太整齐了。办法总是有的，一顿操作后，在知乎上发现了前人栽的树 UncleSugar 的回答 通过 “UncleSugar” 大佬的方法完成 “手写 800 字” 任务，附上最终成品 [一张]。 我一共下载了三款字体【陈静的字完整版】、【萌妹子字体】、【李国夫手写字体】。也可以根据自己的需要和喜好去下载，字体相似度越高越好。 疯狂操作打开 Word，【左下角 “选项”】——&gt;【左侧 “信任中心”】——&gt;【信任中心设置】——&gt; 勾选【启用所有宏】 &nbsp; 创建宏 删除自动生成的代码 1234567Sub 字体修改()'' 字体修改 宏''End Sub 添加代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162Sub 字体修改()'' 字体修改 宏' Dim R_Character As Range Dim FontSize(5) ' 字体大小在5个值之间进行波动，可以改写 FontSize(1) = \"21\" FontSize(2) = \"21.5\" FontSize(3) = \"22\" FontSize(4) = \"22.5\" FontSize(5) = \"23\" Dim FontName(3) '字体名称在三种字体之间进行波动，可改写，但需要保证系统拥有下列字体 FontName(1) = \"陈静的字完整版\" FontName(2) = \"萌妹子体\" FontName(3) = \"liguofu\" Dim ParagraphSpace(5) '行间距 在一定以下值中均等分布，可改写 ParagraphSpace(1) = \"12\" ParagraphSpace(2) = \"13\" ParagraphSpace(3) = \"20\" ParagraphSpace(4) = \"7\" ParagraphSpace(5) = \"12\" '不懂原理的话，不建议修改下列代码 For Each R_Character In ActiveDocument.Characters VBA.Randomize R_Character.Font.Name = FontName(Int(VBA.Rnd * 3) + 1) R_Character.Font.Size = FontSize(Int(VBA.Rnd * 5) + 1) R_Character.Font.Position = Int(VBA.Rnd * 3) + 1 R_Character.Font.Spacing = 0 Next Application.ScreenUpdating = True For Each Cur_Paragraph In ActiveDocument.Paragraphs Cur_Paragraph.LineSpacing = ParagraphSpace(Int(VBA.Rnd * 5) + 1) Next Application.ScreenUpdating = TrueEnd Sub 快捷键 F5，运行，即可返回 Word 查看效果，可以在调整调整字体大小，使其更加自然。大功告成！ “ 我是此间少年郎，你是天上明月光。 ”","categories":[],"tags":[{"name":"分享","slug":"分享","permalink":"https://flipped-1121.github.io/tags/%E5%88%86%E4%BA%AB/"}]},{"title":"心想随记 (一)","slug":"Blog-04","date":"2020-06-14T16:01:24.111Z","updated":"2020-06-24T07:16:33.460Z","comments":true,"path":"2020/06/15/Blog-04/","link":"","permalink":"https://flipped-1121.github.io/2020/06/15/Blog-04/","excerpt":"夜深了，就容易多想🎈🎈🎈","text":"夜深了，就容易多想🎈🎈🎈 &nbsp; &nbsp; 可以回头看，别往回走 删除心灵的垃圾，每天刷新自己，这样才能重获新生！ 对过去，要淡；对现在，要惜；对未来，要信。 活得简单不难，只需懂得为自己而活，为美好而生，为幸福而做。 看淡一些，好善一点 不念过往，做好自己","categories":[],"tags":[{"name":"感悟","slug":"感悟","permalink":"https://flipped-1121.github.io/tags/%E6%84%9F%E6%82%9F/"},{"name":"壁纸","slug":"壁纸","permalink":"https://flipped-1121.github.io/tags/%E5%A3%81%E7%BA%B8/"}]},{"title":"✏Java 笔记 ——IO 流📑","slug":"Blog-03","date":"2020-06-12T11:52:19.703Z","updated":"2020-06-24T07:16:14.748Z","comments":true,"path":"2020/06/12/Blog-03/","link":"","permalink":"https://flipped-1121.github.io/2020/06/12/Blog-03/","excerpt":"Java 学习 ——IO 流🌦🌦🌦","text":"Java 学习 ——IO 流🌦🌦🌦 &nbsp; &nbsp; Tips什么是字节流？字节流 —— 传输过程中，传输数据的最基本单位是字节的流。 什么是字符流？字符流 —— 传输过程中，传输数据的最基本单位是字符的流。 字符编码方式不同，有时候一个字符使用的字节数也不一样，比如 ASCLL 方式编码的字符，占一个字节；而 UTF-8 方式编码的字符，一个英文字符需要一个字节，一个中文需要三个字节。 字节数据是二进制形式的，要转成我们能识别的正常字符，需要选择正确的编码方式。我们生活中遇到的乱码问题就是字节数据没有选择正确的编码方式来显示成字符。 从本质上来讲，写数据（即输出）的时候，字节也好，字符也好，本质上都是没有标识符的，需要去指定编码方式。 但读数据的时候，如果我们需要去 “看数据”，那么字节流的数据需要指定字符编码方式，这样我们才能看到我们能识别的字符；而字符流，因为已经选择好了字符编码方式，通常不需要再改了（除非定义的字符编码方式与数据原有的编码方式不一致！） 在传输方面上，由于计算机的传输本质都是字节，而一个字符由多个字节组成，转成字节之前先要去查表转成字节，所以传输时有时候会使用缓冲区。 字节输入流 InputStream FileInputStream BufferedInputStream【BufferedInputStream 不是 InputStream 的直接实现子类，是 FilterInputStream 的子类】 区别与用途 InputStream 是字节输入流的抽象基类，InputStream 作为基类，给它的基类定义了几个通用的函数： read (byte [] b)：从流中读取 b 的长度个字节的数据存储到 b 中，返回结果是读取的字节个数（当再次读时，如果返回 -1 说明到了结尾，没有了数据） read (byte [] b, int off, int len)：从流中从 off 的位置开始读取 len 个字节的数据存储到 b 中，返回结果是实际读取到的字节个数（当再次读时，如果返回 - 1 说明到了结尾，没有了数据） close ()：关闭流，释放资源。 FileInputStream 主要用来操作文件输入流，它除了可以使用基类定义的函数外，它还实现了基类的 read () 函数（无参的）： read (): 从流中读取 1 个字节的数据，返回结果是一个 int，（如果编码是以一个字节一个字符的，可以尝试转成 char，用来查看数据）。 BufferedInputStream 带有缓冲的意思，普通的读是从硬盘里面读，而带有缓冲区之后，BufferedInputStream 已经提前将数据封装到内存中，内存中操作数据要快，所以它的效率要要非缓冲的要高。它除了可以使用基类定义的函数外，它还实现了基类的 read () 函数（无参的）： read (): 从流中读取 1 个字节的数据，返回结果是一个 int，（如果编码是以一个字节一个字符的，可以尝试转成 char，用来查看数据）。 使用 InputStream 是抽象基类，所以它不可以创建对象，但它可以用来 “接口化编程”，因为大部分子类的函数基类都有定义，所以利用基类来调用函数。 FileInputStream 是用来读文件数据的流，所以它需要一个文件对象用来实例化，这个文件可以是一个 File 对象，也可以是文件名路径字符串。 BufferedInputStream 是一种封装别的流以提高效率的流，所以它的初始化需要一个的 InputStream 流对象。 字节输出流 OutputStream FileOutputStream BufferedOutputStream【BufferedOutputStream 不是 OutputStream 的直接实现子类，是 FilterOutputStream 的子类】 区别与用途 OutputStream 是字节输出流的基类，OutputStream 作为基类，给它的基类定义了几个通用的函数： write (byte [] b): 将 b 的长度个字节数据写到输出流中。 write (byte [] b,int off,int len): 从 b 的 off 位置开始，获取 len 个字节数据，写到输出流中。 flush (): 刷新输出流，把数据马上写到输出流中。 close (): 关闭流，释放系统资源。 FileOutputStream 是用于写文件的输出流，它除了可以使用基类定义的函数外，还实现了 OutputStream 的抽象函数 write (int b): write (int b): 将 b 转成一个字节数据，写到输出流中。 BufferedOutputStream 像上面那个 BufferedInputStream 一样，都可以提高效率。它除了可以使用基类定义的函数外，它还实现了 OutputStream 的抽象函数 write (int b): write (int b): 将 b 转成一个字节数据，写到输出流中。 使用 OutputStream 是抽象基类，所以它不能实例化，但它可以用于接口化编程。 FileOutputStream 是用于写文件的输出流，所以它需要一个文件作为实例化参数，这个文件可以是 File 对象，也可以是文件路径字符串。【如果文件不存在，那么将自动创建】【FileOutputStream 实例化时可以给第二个参数，第二个参数是是否使用追加写入默认，为 true 时代表在原有文件内容后面追加写入数据，默认为 false】 BufferedOutputStream 需要一个输出流作为实例化参数。 字符输入流 Reader InputStreamReader FileReader BufferedReader 区别与用途 Reader 是字符输入流的抽象基类，它定义了以下几个函数： read ()：读取单个字符，返回结果是一个 int，需要转成 char; 到达流的末尾时，返回 - 1 read (char [] cbuf): 读取 cbuf 的长度个字符到 cbuf 这种，返回结果是读取的字符数，到达流的末尾时，返回 - 1 close ()：关闭流，释放占用的系统资源。 InputStreamReader 可以把 InputStream 中的字节数据流根据字符编码方式转成字符数据流。它除了可以使用基类定义的函数，它自己还实现了以下函数： read (char [] cbuf, int offset, int length) ：从 offset 位置开始，读取 length 个字符到 cbuf 中，返回结果是实际读取的字符数，到达流的末尾时，返回 - 1 FileReader 可以把 FileInputStream 中的字节数据转成根据字符编码方式转成字符数据流。 BufferedReader 可以把字符输入流进行封装，将数据进行缓冲，提高读取效率。它除了可以使用基类定义的函数，它自己还实现了以下函数： read (char [] cbuf, int offset, int length) ：从 offset 位置开始，读取 length 个字符到 cbuf 中，返回结果是实际读取的字符数，到达流的末尾时，返回 - 1 readLine ()：读取一个文本行，以行结束符作为末尾，返回结果是读取的字符串。如果已到达流末尾，则返回 null 使用 Reader 是一个抽象基类，不能实例化，但可以用于接口化编程。 InputStreamReader 需要一个字节输入流对象作为实例化参数。还可以指定第二个参数，第二个参数是字符编码方式，可以是编码方式的字符串形式，也可以是一个字符集对象。 FileReader 需要一个文件对象作为实例化参数，可以是 File 类对象，也可以是文件的路径字符串。 BufferReader 需要一个字符输入流对象作为实例化参数。 字符输出流 Writer OutputStreamWriter FileWriter BufferedWriter 区别与用途 Writer 是字符输出流的抽象基类， , 它定义了以下几个函数 write (char [] cbuf): 往输出流写入一个字符数组。 write (int c)：往输出流写入一个字符。 write (String str)：往输出流写入一串字符串。 write (String str, int off,int len) : 往输出流写入字符串的一部分。 close () ：关闭流，释放资源。【这个还是抽象的，写出来是说明有这个关闭功能】 flush ()：刷新输出流，把数据马上写到输出流中。【这个还是抽象的，写出来是说明有这个关闭功能】 OutputStreamWriter 可以使我们直接往流中写字符串数据，它里面会帮我们根据字符编码方式来把字符数据转成字节数据再写给输出流，它相当于一个中介 \\ 桥梁。 FileWriter 与 OutputStreamWriter 功能类似，我们可以直接往流中写字符串数据，FileWriter 内部会根据字符编码方式来把字符数据转成字节数据再写给输出流。 BufferedWriter 比 FileWriter 还高级一点，它利用了缓冲区来提高写的效率。它还多出了一个函数：newLine ()：写入一个换行符。 使用 Writer 是一个抽象基类，不能实例化，但可以用于接口化编程。 OutputStreamWriter 需要一个输入流对象作为实例化参数。 FileWriter 需要一个文件对象来实例化，可以是 File 类对象，也可以是文件的路径字符串。 BufferWriter 需要一个字符输出流对象作为实例化参数。 具体代码格式FileInputStream1234567891011121314151617181920212223242526272829import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.IOException;public class IOTest01 { public static void main(String[] args) { FileInputStream fis = null; try { fis = new FileInputStream(\"F:\\\\Java\\\\code\\\\Java-13\\\\src\\\\File01\"); byte[] b = new byte[4]; int i = 0; while((i = fis.read(b)) != -1) { // \"流\"--&gt;一步完成 System.out.print(new String(b,0,i)); } } catch (FileNotFoundException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } finally { if (fis != null) { try { fis.close(); } catch (IOException e) { e.printStackTrace(); } } } }} FileOutputStream1234567891011121314151617181920212223242526272829303132import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;public class IOTest02 { public static void main(String[] args) { FileOutputStream fos = null; try { fos = new FileOutputStream(\"F:\\\\Java\\\\code\\\\Java-13\\\\src\\\\File02\",true); // \"true\"---&gt;不清空文件添加内容 // 不加\"true\",默认为\"false\"，即清空文件添加内容 String s = \"不要在一切还来得及的时候，不着急；又在一切来不及的时候，选择放弃。\" + \"\\n\" + \"别在一切都还来得及的时候，不着急；又在一切都来不及的时候，选择放弃。\" + \"\\n\"; fos.write(s.getBytes()); fos.flush(); } catch (FileNotFoundException e) { // TODO 自动生成的 catch 块 e.printStackTrace(); } catch (IOException e) { // TODO 自动生成的 catch 块 e.printStackTrace(); } finally { if (fos != null) { try { fos.close(); } catch (IOException e) { // TODO 自动生成的 catch 块 e.printStackTrace(); } } } }} FileReader1234567891011121314151617181920212223242526272829303132import java.io.FileNotFoundException;import java.io.FileReader;import java.io.IOException;public class IOTest03 { public static void main(String[] args) { FileReader fr = null; try { fr = new FileReader(\"F:\\\\Java\\\\code\\\\Java-13\\\\src\\\\File03\"); int i = 0; char[] c = new char[4]; while((i = fr.read(c)) != -1) { System.out.print(c); } } catch (FileNotFoundException e) { // TODO 自动生成的 catch 块 e.printStackTrace(); } catch (IOException e) { // TODO 自动生成的 catch 块 e.printStackTrace(); } finally { if (fr != null) { try { fr.close(); } catch (IOException e) { // TODO 自动生成的 catch 块 e.printStackTrace(); } } } }} FileWriter12345678910111213141516171819202122232425import java.io.FileWriter;import java.io.IOException;public class IOTest04 { public static void main(String[] args) { FileWriter fw = null; try { fw = new FileWriter(\"F:\\\\Java\\\\code\\\\Java-13\\\\src\\\\File04\",true); fw.write(\"那晚，我们都很开心。\"); fw.flush(); } catch (IOException e) { // TODO 自动生成的 catch 块 e.printStackTrace(); } finally { if (fw != null) { try { fw.close(); } catch (IOException e) { // TODO 自动生成的 catch 块 e.printStackTrace(); } } } }} 总结📋【Java】学习之路可谓倒悬之危，课时较少，网课吸收较差，成功的把自己的未来寄托到了【B 站】, 顺利解锁 “我在 B 站上大学” 成就，该笔记内容绝大多数来自网络，以备后期复习。 都说 “不要重复造轮子”，那如果连 “造轮子” 的本事都没有，何谈 “重复” 呢？ &nbsp; 愿一切都好！！！👌","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"https://flipped-1121.github.io/tags/Java/"},{"name":"IO流","slug":"IO流","permalink":"https://flipped-1121.github.io/tags/IO%E6%B5%81/"}]},{"title":"IDM 多线程下载器","slug":"Blog-02","date":"2020-06-09T16:13:40.852Z","updated":"2020-06-24T07:15:52.118Z","comments":true,"path":"2020/06/10/Blog-02/","link":"","permalink":"https://flipped-1121.github.io/2020/06/10/Blog-02/","excerpt":"今天填上一篇的坑","text":"今天填上一篇的坑 &nbsp; &nbsp; IDM 多线程下载器🌙🌙🌙 在上一篇中出现了这张图： &nbsp; 在【KinhDown 免费版】解析 Aria 链接后，自动弹出并请求下载，对！就是这么简单。这就是大名鼎鼎的【IDM】(Internet Download Manager) 安装下载，解压后安装，Windows 式” 下一步 “安装即可。 破解Patches📂中解压与电脑操作系统位数对应的压缩包 (解压密码：123)，右击 Patch 可执行程序，以管理员身份运行，继续【next】。再次点击 IDM，若界面出现 ⚡开始奔放⚡ 诚然，钱包鼓的话，可以去官网 IDM 官网支持一下！那它为什么这么快呢？说白了就是【多线程】。我们将下载一个文件这件事比作为接一桶水，按平常下载的情况就相当于开一个水龙头向桶里放水；当使用上 IDM，就相当于同时打开了多个水龙头往桶里放水，速度当然快起来了。【注】IDM 最大支持 32 线程。至此，电脑上的下载任务，IDM 就可以全局代理。","categories":[],"tags":[{"name":"分享","slug":"分享","permalink":"https://flipped-1121.github.io/tags/%E5%88%86%E4%BA%AB/"},{"name":"IDM","slug":"IDM","permalink":"https://flipped-1121.github.io/tags/IDM/"}]},{"title":"First Blog","slug":"Blog-01","date":"2020-06-09T15:04:52.334Z","updated":"2020-06-24T07:14:18.468Z","comments":true,"path":"2020/06/09/Blog-01/","link":"","permalink":"https://flipped-1121.github.io/2020/06/09/Blog-01/","excerpt":"这是我的第一篇博客，很高兴能与大家分享！一来向大家安利一个好东西👀，二来锻炼我的 Markdown 编辑能力。","text":"这是我的第一篇博客，很高兴能与大家分享！一来向大家安利一个好东西👀，二来锻炼我的 Markdown 编辑能力。 &nbsp; &nbsp; 分享・毒盘不限速下载⚡⚡⚡ 准备工作 软件一款【KinhDown 免费版】 浏览器插件一个【网盘万能助手】 脑子一个【🧠】 使用教程 安装 【KinhDown 免费版】我更愿意叫它为 “KinhDown 绿色版”，因为该软件无需安装，双击即可运行。 【网盘万能助手】插件的安装，这里以 Microsoft Edge 为例，打开浏览器。 &nbsp; 确保打开 “开发人员模式”。 &nbsp; 将下载好的【网盘万能助手 v2.3.2.zip】直接拖入浏览器面板。 具体使用 点击【网盘万能助手】扩展，并【启用当前 UA】； 打开毒盘文件分享链接，点击【下载助手】—&gt;【显示 Aria 链接】。 &nbsp; 并【复制全部默认链接】，此时主角就要登场了，打开【KinhDown 免费版】，将复制的链接粘贴进去并解析。 &nbsp; [注意] 一定要在分享链接中复制 Aria 链接。🐷🐷🐷 &nbsp; 奔放下载中。。。。。。（可以跑满带宽） 实现原理 很深奥，很深奥。。。。。。（其实我也我不知道） 毒盘不限速下载的方法还有很多，譬如，【亿寻】、【Pandownload 复活版】等等，在各大电报群搜罗了一番，本着【互联网分享精神】介绍这一种目前还比较稳定的方法。","categories":[],"tags":[{"name":"百度","slug":"百度","permalink":"https://flipped-1121.github.io/tags/%E7%99%BE%E5%BA%A6/"},{"name":"分享","slug":"分享","permalink":"https://flipped-1121.github.io/tags/%E5%88%86%E4%BA%AB/"}]}],"categories":[],"tags":[{"name":"感悟","slug":"感悟","permalink":"https://flipped-1121.github.io/tags/%E6%84%9F%E6%82%9F/"},{"name":"壁纸","slug":"壁纸","permalink":"https://flipped-1121.github.io/tags/%E5%A3%81%E7%BA%B8/"},{"name":"分享","slug":"分享","permalink":"https://flipped-1121.github.io/tags/%E5%88%86%E4%BA%AB/"},{"name":"Java","slug":"Java","permalink":"https://flipped-1121.github.io/tags/Java/"},{"name":"IO流","slug":"IO流","permalink":"https://flipped-1121.github.io/tags/IO%E6%B5%81/"},{"name":"IDM","slug":"IDM","permalink":"https://flipped-1121.github.io/tags/IDM/"},{"name":"百度","slug":"百度","permalink":"https://flipped-1121.github.io/tags/%E7%99%BE%E5%BA%A6/"}]}